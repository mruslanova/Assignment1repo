data()
data(USAccDeaths)
View(USAccDeaths)
data("USArrests")
View(USArrests)
mydata <- read.xlsx("\hpi-data.xlsx", 1)
install.packages("repmis")
mydata <- read.xlsx("/hpi-data.xlsx", 1)
df <- read.csv("</hpi-data.csv>",
header = TRUE,
quote="\"",
stringsAsFactors= TRUE,
strip.white = TRUE)
df <- read.csv("/hpi-data.csv",
df <- read.csv("/hpi-data.csv",
header = TRUE,
quote="\"",
stringsAsFactors= TRUE,
strip.white = TRUE)
View
df <- read.csv("/hpi-data.csv",
header = TRUE,
quote="\"",
stringsAsFactors= TRUE,)
df <- read.csv("\hpi-data.csv",
df <- read.csv("//hpi-data.csv",
df <- read.csv("//hpi-data.csv",
header = TRUE,
quote="\"",
stringsAsFactors= TRUE,)
View
df <- read.csv("//hpi-data.csv")
hpi.data <- read.csv("~/Documents/Hertie 2016/Collaborative Social Science Data/Test/Test Subfolder/hpi-data.csv")
View(hpi.data)
Summary(hpi.data)
View(hpi.data)
?hpi.data
hist(hpi.data$Inequality.Adjusted.HPI.Rank, hpi.data$Sub.Region)
tail(hpi.data, n=3)
tail(hpi.data, n=12)
hpi.data$iso2c <- countrycode(hpi.data$Country, origin = 'Country', destination = 'iso2c', warn = TRUE)
library(countrycode)
install.packages("countrycode")
library(countrycode)
hpi.data$iso2c <- countrycode(hpi.data$Country, origin = 'Country', destination = 'iso2c', warn = TRUE)
library(randomNames)
library(dplyr)
library(tidyr)
people <- randomNames(n = 1000)
people <- sort(rep(people, 4))
year <- rep(2010:2013, 1000)
trend_income <- c(30000, 31000, 32000, 33000)
income <-  replicate(trend_income + rnorm(4, sd = 20000),
n = 1000) %>%
data.frame() %>%
gather(obs, value, X1:X1000)
income$value[income$value < 0] <- 0
data <- data.frame(people, year, income = income$value)
group_data <- group_by(data, people)
head(group_data)[1:5, ]
people <- randomNames(n = 1000)
people <- sort(rep(people, 4))
year <- rep(2010:2013, 1000)
trend_income <- c(30000, 31000, 32000, 33000)
income <-  replicate(trend_income + rnorm(4, sd = 20000), n = 1000) %>% data.frame() %>% gather(obs, value, X1:X1000) income$value[income$value < 0] <- 0
data <- data.frame(people, year, income = income$value)
group_data <- group_by(data, people)
head(group_data)[1:5, ]
library(dplyr)
library(tidyr)
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
library(tidyr)
library(tidyr)
URL<-'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
ExpensesTable <- URL %>% read_html() %>%
html_nodes('#medals-table_table') %>%
html_table() %>%
as.data.frame
ExpensesTable <- URL %>% read_html() %>%
html_nodes('#medals-table_table') %>%
html_table() %>%
as.data.frame
library(rvest)
ExpensesTable <- URL %>% read_html() %>%
html_nodes('#medals-table_table') %>%
html_table() %>%
as.data.frame
head(medals-table)[, 1:3]
MedalsTable <- URL %>% read_html() %>%
html_nodes('#medals-table_table') %>%
html_table() %>%
as.data.frame
head(MedalsTable)[, 1:3]
head(MedalsTable)[ , 1:3]
head(MedalsTable)[ ,1:3]
head(MedalsTable)[1:3]
head(MedalsTable)
View(MedalsTable)
View(MedalsTable)
MedalsTable <- URL %>% read_html() %>%
html_nodes() %>%
html_table('#medals-table_table') %>%
as.data.frame
MedalsTable <- URL %>% read_html() %>%
html_nodes('#medals-table_table') %>%
html_table() %>%
as.data.frame
MedalsTable <- url %>%
html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
library("rvest")
url <- "http://www.bbc.com/sport/winter-olympics/2014/medals/countries"
MedalsTable <- url %>%
html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
MedalsTable <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
head(MedalsTable)
head(data)
group_data <- group_by(MedalsTable, Total)
head(group_data)[1:5, ]
group_data <- group_by(MedalsTable, Total)
group_data <- group_by (MedalsTable, Total)
library(dplyr)
group_data <- group_by (MedalsTable, Total)
group_data <- group_by (MedalsTable, Total)
group_data <- group_by(MedalsTable, Total)
group_data <- group_by_ (MedalsTable, Total)
head(group_data)[1:5,
group_data <- group_by_ (MedalsTable, Total)
head(group_data)[1:5, ]
min_max_medals <- summarize(group_data,
min_Total = min(Total),
max_Total = max(Total))
group_data <- group_by_ (MedalsTable, Total)
head(group_data)[1:5, ]
group_data <- group_by(MedalsTable, Total)
data.frame(t(sapply(mylistlist,c)))
data.frame(t(sapply(MedalsTable,c)))
group_data <- group_by (MedalsTable, Total)
as.data.frame(MedalsTable)
group_data <- group_by (MedalsTable, Total)
data.frame(t(sapply(MedalsTable,c)))
data.frame(t(sapply(MedalsTable,c)))
group_data <- group_by (MedalsTable, Total)
MedalsTable2<- data.frame(Country, Var.3, Var.4, Var.5, Total, NA.)
MedalsTable2<- data.frame(MedalsTable,Country, Var.3, Var.4, Var.5, Total, NA.)
data.frame(t(sapply(MedalsTable,c)))
as.data.frame(MedalsTable)
group_data <- group_by (MedalsTable, Total)
group_data <- group_by(MedalsTable, Total)
MedalsTable <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
as.data.frame()
MedalsTable <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
as.data.frame
head(MedalsTable)
group_data <- group_by(MedalsTable, Total)
MedalsTable2 <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
as.data.frame
head(MedalsTable2)
library(dplyr)
library(tidyr)
library(rvest)
install.packages('tidyr')
library(tidyr)
library("rvest")
library("rvest")
url <- "http://www.bbc.com/sport/winter-olympics/2014/medals/countries"
MedalsTable2 <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
as.data.frame
View(MedalsTable)
remove(MedalsTable)
remove(MedalsTable2)
MedalsTable <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
as.data.frame
names(MedalsTable) <- c("Rank", "Country","Gold","Silver","Bronze","Total","NA")
names(MedalsTable) <- c("Rank", "Country","Gold","Silver","Bronze","Total")
names(MedalsTable) <- c("Rank", "Country","Gold","Silver","Bronze","Total", "Other")
remove(MedalsTable)
remove(ExpensesTable)
remove(people)
remove(URL)
remove(year)
remove(MedalsTable)
remove(ExpensesTable)
remove(people)
remove(URL)
remove(year)
remove(trend_income)
remove(url)
remove(hpi.data)
install dplry
install rvest
install.packages('rvest')
install.packages("rvest")
install.packages('dplry')
library('dplyr')
library('rvest')
URL('http://www.bbc.com/sport/winter-olympics/2014/medals/countries')
URL <- ('http://www.bbc.com/sport/winter-olympics/2014/medals/countries')
table <- URL %>% read_html() %>%
html_nodes('table') %>%
html_table() %>%
as.data.frame
names(table) <- c("Rank", "Country", "Gold", "Silver", "Bronze", "Total", "Other")
descending <- arrange(table, desc(Total))
head(descending)[1:3, ]
install.packages("stargazer")
install.packages("knitr")
install.packages("ggplot2")
install.packages("rvest")
install.packages("dplyr")
library("stargazer")
library("knitr")
library("ggplot2")
library("rvest")
library("dplyr")
URL <- 'http://www.ats.ucla.edu/stat/data/binary.csv'
Admission <- read.csv(URL)
Admission <- read.csv(URL)
Logit1 <- glm(admit ~ gre + gpa + as.factor(rank),
data = Admission, family = 'binomial')
fitted <- with(Admission,
data.frame(gre = mean(gre),
gpa = mean(gpa),
rank = factor(1:4)))
fitted$predicted <- predict(Logit1, newdata = fitted,
type = 'response')
kable(fitted)
caption = 'Predicted Probabilities for Fitted Values')
fitted$predicted <- predict(Logit1, newdata = fitted,
type = 'response')
kable(fitted, align = 'c', digits = 2,
caption = 'Predicted Probabilities for Fitted Values')
L1 <- glm(admit ~ gre,
data = Admission, family = 'binomial')
L2 <- glm(admit ~ gre + gpa,
data = Admission, family = 'binomial')
L3 <- glm(admit ~ gre + gpa + as.factor(rank),
data = Admission, family = 'binomial')
labels <- c('GRE Score', 'GPA Score',
'2nd Ranked School', '3rd Ranked School',
'4th Ranked School', '(Intercept)')
stargazer::stargazer(L1, L2, L3, covariate.labels = labels,
title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'html')
digits = 2, type = 'html')
labels <- c('GRE Score', 'GPA Score',
'2nd Ranked School', '3rd Ranked School',
'4th Ranked School', '(Intercept)')
stargazer::stargazer(L1, L2, L3, covariate.labels = labels,
title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'html')
labels <- c('GRE Score', 'GPA Score',
'2nd Ranked School', '3rd Ranked School',
'4th Ranked School', '(Intercept)')
stargazer::stargazer(L1, L2, L3, covariate.labels = labels,
title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'latex', header = FALSE)
stargazer(L1, L2, L3, type = 'text')
install.packages(simGLM)
library(simGLM)
install.packages("simGLM")
library(simGLM)
install.packages("simGLM")
install.packages("simGLM")
install.package("simGLM")
install.packages("simGLM")
ghit::install_github('christophergandrud/simGLM')
install_github('christophergandrud/simGLM')
install.packages("ghit")
ghit::install_github('christophergandrud/simGLM')
library(car) # contains data
library(simGLM)
library(ggplot2) # only needed for adding additional arguments outside of sim_glm
# Estimate model
m1 <- lm(prestige ~ education + type, data = Prestige)
# Create fitted values
fitted_prestige <- expand.grid(education = 6:16, typewc = 1)
# Simulate and plot
sim_glm(obj = m1, newdata = fitted_prestige, x_coef = 'education') + ylab('Predicted Job Prestige\n') + xlab('\nYears of Education')
## typeprof fitted at 0
library("ghit", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(simGLM)
ghit::install_github('christophergandrud/simGLM')
devtools::install_github('christophergandrud/simGLM')
install.packages('devtools')
devtools::install_github('christophergandrud/simGLM')
library(simGLM)
library(car) # contains data
library(simGLM)
library(ggplot2) # only needed for adding additional arguments outside of sim_glm
# Estimate model
m1 <- lm(prestige ~ education + type, data = Prestige)
# Create fitted values
fitted_prestige <- expand.grid(education = 6:16, typewc = 1)
# Simulate and plot
sim_glm(obj = m1, newdata = fitted_prestige, x_coef = 'education') + ylab('Predicted Job Prestige\n') + xlab('\nYears of Education')
## typeprof fitted at 0
install.packages("car")
library(car) # contains data
library(simGLM)
library(ggplot2) # only needed for adding additional arguments outside of sim_glm
# Estimate model
m1 <- lm(prestige ~ education + type, data = Prestige)
# Create fitted values
fitted_prestige <- expand.grid(education = 6:16, typewc = 1)
# Simulate and plot
sim_glm(obj = m1, newdata = fitted_prestige, x_coef = 'education') + ylab('Predicted Job Prestige\n') + xlab('\nYears of Education')
## typeprof fitted at 0
URL <- 'http://www.ats.ucla.edu/stat/data/binary.csv'
Admission <- read.csv(URL)
Admission$rank <- as.factor(Admission$rank)
# Estimate model
m2 <- glm(admit ~ gre + gpa + rank, data = Admission, family = 'binomial')
# Create fitted values
fitted_admit <- expand.grid(gre = seq(220, 800, by = 10), gpa = c(2, 4),
rank4 = 1)
# Simulate and plot
sim_glm(obj = m2, newdata = fitted_admit, model = 'logit', x_coef = 'gre',
group_coef = 'gpa')
install.packages("xlsxjars")
install.packages("rJava")
install.packages("xlsxjars")
install.packages("xlsx")
library(xlsxjars)
library(rJava)
library(xlsxjars)
library(xlsx)
export_land_primary <- read.table("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/Climate-Happiness-Repository/Data/export_land_primary.xlsx", header=TRUE, quote="\"")
View(export_land_primary)
install.packages("xlsx")
install.packages("xlsxjars")
install.packages("rJava")
library(rJava)
library(xlsxjars)
library(xlsx)
export_land_primary <- read.csv("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/Climate-Happiness-Repository/Data/export_land_primary.csv", comment.char="#")
View(export_land_primary)
use warnings()
use warnings()
warnings()
